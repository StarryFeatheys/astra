[{"content":"本文为了防止在代码块中的短代码被 Hugo 转译，在代码块中添加了 \\，请在使用时去除\n隐藏文字 配置 在 /layouts/shortcodes 目录下创建 detail.html 并填入以下代码：\n1 2 3 4 \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;{{ (.Get 0) | markdownify }}\u0026lt;/summary\u0026gt; {{ .Inner | markdownify }} \u0026lt;/details\u0026gt; 使用 1 2 3 {\\{\u0026lt; detail \u0026#34;点这里看隐藏内容！\u0026#34; \u0026gt;}} 这里是隐藏内容！🥰 {\\{\u0026lt; /detail \u0026gt;}} 效果 点这里看隐藏内容！\r这里是隐藏内容！🥰\r聊天气泡 配置 在 /layouts/shortcodes 目录下创建 chat.html 并填入以下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 {{ if eq (.Get \u0026#34;position\u0026#34;) \u0026#34;left\u0026#34; }} \u0026lt;div class=\u0026#34;chat --other\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;chat__inner\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;chat__meta\u0026#34;\u0026gt;{{ .Get \u0026#34;name\u0026#34; }}\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;{{ .Get \u0026#34;timestamp\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;chat__text\u0026#34;\u0026gt; {{ .Inner }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ else if eq (.Get \u0026#34;position\u0026#34;) \u0026#34;right\u0026#34; }} \u0026lt;div class=\u0026#34;chat --self\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;chat__inner\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;chat__meta\u0026#34; style=\u0026#34;text-align: right;\u0026#34;\u0026gt;{{ .Get \u0026#34;timestamp\u0026#34; }}\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;{{ .Get \u0026#34;name\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;chat__text\u0026#34;\u0026gt; {{ .Inner }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;style\u0026gt; .chat { margin: 10px; padding: 10px; position: relative; /* 添加相对定位，以便定位尖角箭头 */ transition: transform 0.2s; /* 添加过渡效果，使放大平滑 */ max-width: 80%; min-width: 15%; } .chat:hover { transform: scale(1.05); } .chat.--self { text-align: left; background-color: #ecf5ff; color: #000000; border-radius: 15px; width: fit-content; margin-left: auto; } /* 尖角箭头 */ .chat.--self::before { content: \u0026#34;\u0026#34;; position: absolute; right: -18px; /* 调整箭头位置 */ bottom: 5px; transform: translateY(-50%); border-width: 15px 0 0 20px; border-style: solid; border-color: transparent transparent transparent #ecf5ff; /* 箭头颜色与对话框背景颜色一致 */ } /* 左边对话框样式 */ .chat.--other { text-align: left; background-color: #ffecec; color: #333; border-radius: 15px; position: relative; width: fit-content; } /* 左边对话框的尖角箭头 */ .chat.--other::before { content: \u0026#34;\u0026#34;; position: absolute; left: -18px; bottom: 5px; transform: translateY(-50%); border-width: 15px 20px 0 0; border-style: solid; border-color: transparent #ffecec transparent transparent; } /* 消息元数据样式（名称和时间戳） */ .chat__meta { font-weight: bold; font-size: 0.67em; color: #707070; margin-bottom: 5px; } /* 消息文本样式 */ .chat__text { font-size: 0.9em; margin-left: 10px; word-break: break-all; } [data-scheme=\u0026#34;dark\u0026#34;] { .chat.--self { color: #fefefe; background-color: #253958; } .chat.--self::before { border-color: transparent transparent transparent #253958; } .chat.--other { color: #fefefe; background-color: #1a1a1a; } .chat.--other::before { border-color: transparent #1a1a1a transparent transparent; } .chat__meta { color: #b1b1b1; } } \u0026lt;/style\u0026gt; 使用 1 2 3 4 5 6 7 {\\{\u0026lt; chat position=\u0026#34;left\u0026#34; name=\u0026#34;John Doe\u0026#34; timestamp=\u0026#34;2023-09-12 14:30\u0026#34;\u0026gt;}\\} 这是左边的消息内容。 {\\{\u0026lt; /chat \u0026gt;}\\} {\\{\u0026lt; chat position=\u0026#34;right\u0026#34; name=\u0026#34;Alice\u0026#34; timestamp=\u0026#34;2023-09-12 14:45\u0026#34; \u0026gt;}\\} 这是右边的消息内容，测试长长长长长长长长长长长长长长长长长长长长长长长长度。 {\\{\u0026lt; /chat \u0026gt;}\\} 效果 John Doe\u0026nbsp;\u0026nbsp;\u0026nbsp;2023-09-12 14:30\r这是左边的消息内容。\r2023-09-12 14:45\u0026nbsp;\u0026nbsp;\u0026nbsp;Alice\r这是右边的消息内容，测试长长长长长长长长长长长长长长长长长长长长长长长长度。\r时间轴 配置 在 /layouts/shortcodes 目录下创建 timeline.html 并填入以下代码：\n{{- $date := .Get \u0026#34;date\u0026#34; -}} {{- $title := .Get \u0026#34;title\u0026#34; -}} {{- $description := .Get \u0026#34;description\u0026#34; -}} {{- $tags := .Get \u0026#34;tags\u0026#34; -}}{{- $url := .Get \u0026#34;url\u0026#34; -}} \u0026lt;div class=\u0026#34;timeline__row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;timeline__time\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;timeline__time\u0026#34;\u0026gt;{{ $date }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;timeline__split-line\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;timeline__content\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;timeline__tags\u0026#34;\u0026gt; {{- with split $tags \u0026#34;, \u0026#34; -}} {{- range . }}{{- if eq . \u0026#34;样式\u0026#34; }} \u0026lt;span class=\u0026#34;timeline__tag timeline__tag-style\u0026#34;\u0026gt;{{ . }}\u0026lt;/span\u0026gt; {{- else if eq . \u0026#34;文章\u0026#34; }} \u0026lt;span class=\u0026#34;timeline__tag timeline__tag-article\u0026#34;\u0026gt;{{ . }}\u0026lt;/span\u0026gt; {{- else if eq . \u0026#34;页面\u0026#34; }} \u0026lt;span class=\u0026#34;timeline__tag timeline__tag-page\u0026#34;\u0026gt;{{ . }}\u0026lt;/span\u0026gt; {{- else }} \u0026lt;span class=\u0026#34;timeline__tag\u0026#34;\u0026gt;{{ . }}\u0026lt;/span\u0026gt; {{- end }} {{- end }} {{- end }} \u0026lt;/div\u0026gt; \u0026lt;a href=\u0026#34;{{ $url }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;timeline__title\u0026#34;\u0026gt;{{ $title }}\u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;!-- title 可点击，默认就是跳转时间轴所在页 --\u0026gt; \u0026lt;div class=\u0026#34;timeline__description\u0026#34;\u0026gt; {{ $description }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;style\u0026gt; .timeline { display: flex; flex-direction: column; } .timeline__row { display: flex; padding-left: 4%; height: 90px; } .timeline__time { flex: 0 0 110px; color: #5d5d5d; font-size: 17px; text-transform: uppercase; position: relative; display: flex; flex-direction: column; align-items: center; padding: 0.5rem 0; } .timeline__time-text { margin: 0; } .timeline__split-line { position: absolute; top: 0.5rem; right: -20px; height: 100%; width: 2px; background-color: #84c4e240; z-index: 0; } .timeline__split-line:before { content: \u0026#34;\u0026#34;; position: absolute; top: 24%; right: -4px; transform: translateY(-50%); width: 10px; height: 10px; background-color: #c9e5f2; box-shadow: 0 0 0 4px var(--theme); border-radius: 50%; border: 0px solid #84c4e2; z-index: -1; } .timeline__content { flex: 1; margin-left: 4.5rem; padding: 0.5rem 0 1.2rem 0; } .timeline__title { margin: 0; margin-bottom: 2px; padding-top: 3px; margin-left: 0.5rem; color: var(--content); font-family: var(--font-family-teshu); font-size: 19px; font-weight: 600; width: fit-content; display: inline-block; vertical-align: middle; /* 垂直居中对齐 */ } .timeline__tags { display: inline-block; padding: 0; margin-left: 0.3rem; align-items: center; gap: 0.3rem; } .timeline__tag { display: inline-block; color: var(--secondary); background-color: #84c4e230; border: 1.5px solid #84c4e230; border-radius: 999px; padding: 0rem 0.5rem; font-size: 12px; white-space: nowrap; line-height: 1.4rem; opacity: 0.8; vertical-align: middle; /* 垂直居中对齐 */ } .timeline__description { font-size: 15px; line-height: 1.6; color: #5d5d5d; overflow: hidden; text-overflow: ellipsis; margin: 0.5rem 0 0.4rem 1.5rem; /* 添加 1.5rem 的左侧内边距 */ } /* 为类名为 \u0026#34;timeline__tag-style\u0026#34; 的标签定义颜色 */ .timeline__tag-style { background-color: #c581da; /* 替换为你希望的颜色 */ border-color: #c581da; /* 与背景色相同或不同，根据需要自定义 */ color: #FFFFFF; /* 根据需要选择文本颜色 */ } /* 为类名为 \u0026#34;timeline__tag-article\u0026#34; 的标签定义颜色 */ .timeline__tag-article { background-color: #92d392; /* 替换为你希望的颜色 */ border-color: #92d392; /* 与背景色相同或不同，根据需要自定义 */ color: #000000; /* 根据需要选择文本颜色 */ } /* 为类名为 \u0026#34;timeline__tag-page\u0026#34; 的标签定义颜色 */ .timeline__tag-page { background-color: #707070; /* 替换为你希望的颜色 */ border-color: #707070; /* 与背景色相同或不同，根据需要自定义 */ color: #FFFFFF; /* 根据需要选择文本颜色 */ } @media screen and (max-width: 768px) { .timeline__time { font-size: 14px; /* 在小屏幕上使用较小的字体大小 */ } .timeline__title { font-size: 16px; /* 在小屏幕上使用较小的字体大小 */ } .timeline__description { font-size: 14px; /* 在小屏幕上使用较小的字体大小 */ } } \u0026lt;/style\u0026gt; 使用 1 {/{\u0026lt; timeline date=\u0026#34;2023-10-01\u0026#34; title=\u0026#34;国庆节\u0026#34; description=\u0026#34;祖国生日快乐\u0026#34; tags=\u0026#34;节日\u0026#34; url=\u0026#34;\u0026#34; \u0026gt;}/} 效果 2023-09-11\rweekday\r周一\r周一快乐。\r2023-09-10\r节日\r教师节\r教师节快乐。\r哔哩哔哩 配置 hugo stack 这个主题自带了哔哩哔哩短代码，无需创建，直接使用即可。\n使用 1 {/{\u0026lt; bilibili av1356335519 \u0026gt;}} 注意：请将 av1356335519 替换为实际的视频 AV 号。\n效果 参考链接 Ghugo stack 主题美化\nStack官方文档\n","date":"2024-11-24T09:08:41+08:00","image":"https://maxpcimg.cc/i/2024/12/01/674c07f27b545.webp","permalink":"http://localhost:1313/p/hugo-github-blog/","title":"Hugo的一些短代码"},{"content":"\r2023-09-12 14:45\u0026nbsp;\u0026nbsp;\u0026nbsp;Alice\r这里只是个测试的 测试一些短代码效果后继会慢慢完善 好喜欢蓝色！\r这个短代码只在电脑端生效\r一些手动打码效果！\n等风来，不如追风去。\n我挑的配色很好看吧！\n好喜欢蓝色\n","date":"2024-11-24T09:08:41+08:00","permalink":"http://localhost:1313/p/photo/","title":"测试"},{"content":"在这个数字化时代，掌握高效的文本编辑和文档创作工具至关重要。Markdown 正是这样一款轻量级标记语言，以其简洁、易读易写的特点，赢得了无数写作者、程序员和文档工作者的青睐。今天，我将带你深入了解 Markdown，从基础语法到高级技巧，助你轻松掌握这一强大工具。\n一、Markdown 是什么？ Markdown 诞生于 2004 年，由 John Gruber 和 Aaron Swartz 共同创造。它是一种轻量级标记语言，旨在提供一种易读易写的纯文本格式，同时又能转换为有效的 XHTML（或 HTML）文档。\nMarkdown 的语法设计得简洁明了，无需复杂的排版操作，就能快速创建出格式规范的文档。它在博客写作、技术文档、笔记记录等领域得到了广泛应用。\n二、Markdown 基础语法 1. 标题 在 Markdown 中，标题通过使用 # 符号来创建。标题的级别由 # 的数量决定：\n1 2 3 # 一级标题 ## 二级标题 ### 三级标题 2. 段落 段落是文档的基本组成部分。在 Markdown 中，段落之间通过一个或多个空行分隔：\n1 2 3 这是第一个段落。 这是第二个段落。 3. 强调 加粗：使用两个 * 或 _ 包裹需要加粗的文本。 斜体：使用一个 * 或 _ 包裹需要斜体的文本。 1 2 3 4 5 **这是加粗的文本** __这是加粗的文本__ *这是斜体的文本* _这是斜体的文本_ 4. 列表 无序列表：使用 -、* 或 + 作为列表项的标记。 有序列表：使用数字后跟一个 . 作为列表项的标记。 1 2 3 4 5 6 7 - 列表项 1 - 列表项 2 - 列表项 3 1. 列表项 1 2. 列表项 2 3. 列表项 3 5. 链接 链接的语法为 [链接文本](链接地址)。\n1 [百度](https://www.baidu.com) 6. 图片 图片的语法为 ![图片替代文本](图片地址)。\n1 ![美丽的风景](https://example.com/image.jpg) 7. 引用 引用可以通过在段落开头使用 \u0026gt; 符号来创建。\n1 2 \u0026gt; 这是一个引用的段落。 \u0026gt; 引用可以包含多个段落。 8. 代码 行内代码：使用反引号 ` 包裹代码。 代码块：使用三个反引号 ``` 包裹代码，并可以在开头的反引号后面指定代码的语言，以便进行语法高亮。 1 2 3 4 这是一段行内代码 `print(\u0026#34;Hello, World!\u0026#34;)`。 ```python print(\u0026#34;Hello, World!\u0026#34;) 1 2 3 4 5 6 7 8 9 10 11 12 ### 三、Markdown 高级语法 #### 1. 表格 表格可以使用 `|` 和 `-` 来创建。 ```markdown | 列 1 | 列 2 | 列 3 | | ---- | ---- | ---- | | 数据 1 | 数据 2 | 数据 3 | | 数据 4 | 数据 5 | 数据 6 | 2. 任务列表 任务列表可以使用 - [ ] 和 - [x] 来创建未完成和已完成的任务。\n1 2 3 - [ ] 任务 1 - [x] 任务 2 - [ ] 任务 3 3. 分割线 可以使用三个或更多的 *、- 或 _ 来创建分割线。\n1 2 3 *** --- ___ 4. 数学公式 Markdown 可以通过使用特定的语法来插入数学公式。例如，使用 $ 包裹公式可以创建行内公式，使用 $$ 包裹公式可以创建块级公式。\n1 2 3 4 5 6 这是一个行内公式：$E=mc^2$。 这是一个块级公式： $$ \\int_{-\\infty}^{\\infty}e^{-x^2}dx=\\sqrt{\\pi} $$ 5. 脚注 脚注可以通过在需要添加脚注的文本后面加上 [^脚注编号]，并在文档的末尾添加脚注的解释。\n1 2 3 这是一个脚注的例子[^1]。 [^1]: 这是脚注的解释。 四、Markdown 工具推荐 1. Typora Typora 是一款简洁易用的 Markdown 编辑器，它提供了实时预览功能，让你可以在编辑的同时看到最终的效果。Typora 支持多种操作系统，包括 Windows、macOS 和 Linux。\n2. MarkdownPad MarkdownPad 是另一款受欢迎的 Markdown 编辑器，它也提供了实时预览和多种编辑功能。MarkdownPad 分为免费版和专业版，专业版提供了更多的高级功能。\n这篇文章大多数是写给我自己看，记录一下学习总结，希望能帮到你。参考了 Markdown 官方文档 以及网上其他资料。\n","date":"2024-10-30T09:08:41+08:00","permalink":"http://localhost:1313/p/markdown-%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/","title":"Markdown 完全指南：从入门到精通"},{"content":"在这个信息爆炸的时代，我们看似身处信息的海洋，却常常被困在“信息茧房”之中。\n一、信息茧房的定义与本质 信息茧房指的是人们的信息获取往往会被自己的兴趣所引导，从而将自己束缚在一个狭窄的信息空间里。其本质是一种共鸣（或共情）成瘾，我们只愿意看到自己想看到的，而对另一面的观点和想法选择性忽视。\n这种现象的危害不容小觑。它不仅限制了我们的视野，使我们难以接触到多元的观点和信息，导致思维的狭隘和偏见的加深，还让我们失去了对复杂世界全面、客观的认知和理解能力。\n二、如何打破信息茧房 1. 主动拓展知识领域 勇敢地跳出自己熟悉的舒适区，积极探索未曾涉足的知识领域，拓宽视野。\n2. 多元化信息渠道 广泛关注不同类型、不同风格的权威媒体和信息源，避免信息来源的单一化。\n3. 积极参与观点碰撞 热情参与各种有深度、有不同观点交锋的讨论，以开放的心态倾听和理解他人的看法。\n4. 培养批判性思维 对接收的信息保持警惕，深入思考、分析，不盲目跟从，敢于质疑和挑战固有观念。\n5. 定期自我反思与调整 时常审视自己的信息获取习惯和认知偏见，发现问题及时改进。\n三、个人总结 在深入思考信息茧房这一现象后，我深刻认识到它对个人成长和社会发展的阻碍。我们生活在一个多元且复杂的世界中，不能被自己的偏好和偏见所蒙蔽。\n打破信息茧房需要我们有勇气面对不同的声音，有决心改变固有的习惯。只有这样，我们才能不断丰富自己的认知，提升思考能力，以更加全面和客观的视角去理解这个世界。\n让我们共同努力，挣脱信息茧房的束缚，拥抱更广阔、更多元的世界！\n","date":"2024-10-23T09:08:41+08:00","permalink":"http://localhost:1313/p/%E5%A6%82%E4%BD%95%E6%89%93%E7%A0%B4%E4%BF%A1%E6%81%AF%E8%8C%A7%E6%88%BF/","title":"如何打破信息茧房"},{"content":"引言 学习是一场与自我的深度对话，其本质究竟为何？答案呼之欲出：极致的重复与坚持。\n如何做到有效的重复？ 1. 批判思考，温故而知新 每次重复学习时，都要进行批判思考，温故而知新。从已学的知识点中挖掘新的认知。每一次的重复，都能让我们的理解更深入，这便是构建知识体系的过程。\n2. 多种重复形式互相结合 仅仅依靠笔记或口头表述是远远不够的，要将听、说、读、写充分调动起来，相互融合。通过坚持不懈的重复，积累数量，方能彰显质量。\n3. 间隔式重复 若想将知识转化为长期记忆，集中式重复仅对短期记忆有所助益，考前临时抱佛脚便是典型例子。间隔式重复则需依据所学知识点及自身时间安排，灵活调整重复的次数与频率。艾宾浩斯遗忘曲线，恰如其分地揭示了这一记忆规律。\n4. 大量应用 让知识“活”起来！学习绝非单纯的记忆，关键在于运用掌握的知识点去化解一个个具体难题。在应用过程中，进一步深化对知识的领悟。\n重复与坚持：成功的关键 罗振宇曾言：成功＝核心算法 x 大量重复动作的平方。他说道：“人生算法乃是在面对世界时，不断重复的最基本套路，找到它、重复它、强化它、优化它，直至大脑能够随心运用。”\n记性欠佳？那就勤做笔记。毕竟，好记性不如烂笔头。智商平平？那就笨鸟先飞，且要多飞，坚持到底方为贵。\n结语 学习的本质在于：重复、重复、极致重复，坚持、坚持、极致坚持，直至熟能生巧、巧能运用，最终形成肌肉记忆。重复，乃是培育自律和毅力的必经之路。唯有通过持续不断的学习、锲而不舍的坚持，方能战胜重重困难，砥砺前行。\n作家托尔斯泰讲道：“最易之事乃为贫乏与失败，唯有凭借持之以恒的努力、坚持和重复，我们方可斩获成功。”\n学习之旅或许荆棘丛生，但只要我们将重复与坚持铭记于心，付诸实践，就必定能采撷知识的丰硕果实，迈向成功的康庄大道。让我们在求知的漫漫征途中，披荆斩棘，勇往直前，以重复和坚持谱写属于自己的璀璨华章！\n","date":"2024-10-23T09:08:41+08:00","permalink":"http://localhost:1313/p/%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%9E%81%E8%87%B4%E7%9A%84%E9%87%8D%E5%A4%8D%E4%B8%8E%E5%9D%9A%E6%8C%81/","title":"学习的本质：极致的重复与坚持"},{"content":"一、为什么要配置 Git？ Git 的默认设置通常能够满足基本的使用需求，但通过配置可以实现以下优势：\n个性化工作环境 根据个人喜好设置用户名、邮箱、编辑器等，使其更符合个人工作习惯。 提高效率 配置快捷键、别名等操作，减少输入命令的时间，提高工作效率。 更好的团队协作 确保提交信息的规范，便于团队成员理解，提高团队协作效率。 适应不同的开发场景 配置不同的远程仓库、处理分支策略等，适应各种复杂的开发需求。 二、Git 配置文件 Git 的配置信息存储在三个不同的位置：\n系统级配置文件 通常位于 /etc/gitconfig（在 Windows 上可能是在 Git 安装目录下的某个位置）。对系统上的所有用户生效。 用户级配置文件 在用户主目录下的 .gitconfig 文件。对当前用户生效。 项目级配置文件 位于每个 Git 仓库中的 .git/config 文件。只对当前仓库生效。 配置的优先级从低到高依次为系统级、用户级、项目级。这意味着如果在三个位置都设置了相同的配置项，项目级配置将覆盖用户级配置，用户级配置将覆盖系统级配置。\n三、基本配置 1. 设置用户名和邮箱 这是使用 Git 时最基本的配置，用于标识你的提交。\n1 2 git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;your@email.com\u0026#34; 项目级配置示例：\n1 2 git config user.name \u0026#34;Project-specific Name\u0026#34; git config user.email \u0026#34;project@email.com\u0026#34; 2. 设置默认编辑器 Git 在需要你输入提交信息、合并冲突解决等情况下会调用编辑器。\n命令示例：\n1 git config --global core.editor \u0026#34;vim\u0026#34; 使用 Visual Studio Code 的命令示例：\n1 git config --global core.editor \u0026#34;code --wait\u0026#34; 3. 设置差异分析工具 在查看文件差异时，可以使用特定的工具来获得更好的可视化效果。\n命令示例：\n1 git config --global merge.tool meld 启动 meld 进行冲突解决：\n1 git mergetool 四、高级配置 1. 设置别名 别名可以让你使用更短的命令来代替常用的 Git 命令，提高工作效率。\n命令示例：\n1 git config --global alias.st status 设置更复杂的别名示例：\n1 git config --global alias.lg \u0026#34;log --color --graph --pretty=format:\u0026#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)\u0026lt;%an\u0026gt;%Creset\u0026#39; --abbrev-commit\u0026#34; 2. 配置颜色输出 使 Git 的输出更加易读。\n命令示例：\n1 git config --global color.ui auto 3. 设置提交模板 可以为提交信息设置模板，确保提交信息的规范和一致性。\n创建 .gitmessage.txt 文件并设置 Git 使用这个模板：\n1 git config --global commit.template ~/.gitmessage.txt 4. 配置忽略文件 在项目中，有些文件不需要被 Git 跟踪，例如编译生成的文件、临时文件等。\n创建 .gitignore 文件并添加忽略规则：\n1 2 3 __pycache__/ *.pyc .DS_Store 五、配置远程仓库 1. 添加远程仓库 命令示例：\n1 git remote add origin https://github.com/yourusername/yourrepository.git 2. 设置远程仓库的上游分支 命令示例：\n1 git branch --set-upstream-to=origin/master master 3. 配置多个远程仓库 命令示例：\n1 2 git remote add github https://github.com/yourusername/yourrepository.git git remote add gitlab https://gitlab.com/yourcompany/yourrepository.git 拉取和推送代码示例：\n1 2 git pull github master git push gitlab master 六、安全配置 1. 使用 SSH 密钥进行身份验证 生成 SSH 密钥对：\n1 ssh-keygen -t rsa -b 4096 -C \u0026#34;your@email.com\u0026#34; 将公钥添加到远程仓库设置中。\n配置 Git 使用 SSH 连接：\n1 git remote set-url origin git@github.com:yourusername/yourrepository.git 2. 配置 Git 凭证存储 命令示例：\n1 git config --global credential.helper osxkeychain 在 Windows 上使用 wincred：\n1 git config --global credential.helper wincred 七、总结 通过正确地配置 Git，你可以个性化自己的开发环境，提高工作效率，并更好地与团队成员协作。本文介绍了 Git 的基本配置、高级配置、远程仓库配置和安全配置等方面的内容，希望对你有所帮助。在实际使用中，你可以根据自己的需求和工作习惯进行进一步的调整和优化。\n记住，配置 Git 是一个持续的过程，随着你的开发经验的增加，你可能会发现新的配置需求和优化方法。不断探索和尝试，让 Git 成为你软件开发过程中的得力助手。\n","date":"2024-10-15T09:08:41+08:00","permalink":"http://localhost:1313/p/git-%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/","title":"Git 配置指南"},{"content":"Gridea主题Next的配置 一、前言 Gridea 是一款静态博客写作客户端，它简洁易用，支持多种平台的部署。而 Next 主题则为 Gridea 带来了更加美观和丰富的功能。\n二、安装 Gridea 首先，前往 Gridea 的官方网站 Gridea官网 下载适合你操作系统的版本。 安装下载的文件，按照安装向导的提示进行操作。\n三、获取 Next 主题 这里可以直接去 Gridea 的官方网站 Gridea官网 下载。\n四、安装 Next 主题 光下载是没用滴，你还要把他拖到正确的位置。\n点击左下角的这个，找一找自己存放 Gridea 的站内源文件路径。如下图\n比如说我的 Gridea 就下到 D 盘去了，记住，路径绝对绝对绝对不可以随意更改!，更改会出大问题，可能会丢失你之前写的文章。\n点开自己存放 Gridea 的站内源文件路径，找到 theme，把你下载的文件夹丢进去，好啦！就可以应用啦！\n导入成功后，你可以在主题列表中看到 Next 主题。 选择 Next 主题，点击“应用”按钮，即可将 Next 主题应用到你的博客中。\n五、配置 Next 主题 主题颜色 Next 主题提供了多种颜色方案可供选择。在 Gridea 的设置中，找到“主题设置”选项。在主题设置中，可以看到“颜色方案”选项，点击下拉菜单选择你喜欢的颜色方案。\n导航栏设置 你可以自定义导航栏的链接。在主题设置中，找到“导航栏”选项。点击“添加链接”按钮，输入链接名称和链接地址，即可在导航栏中添加自定义链接。\n首页布局 Next 主题支持多种首页布局方式。在主题设置中，找到“首页布局”选项。可以选择“卡片布局”“列表布局”等不同的布局方式，根据自己的喜好进行设置。\n文章页面设置 在主题设置中，找到“文章页面”选项。可以设置文章的字体大小、行间距、段落间距等格式。还可以选择是否显示文章目录，方便读者快速浏览文章内容。\n社交链接设置 如果你希望在博客中展示自己的社交账号，可以在主题设置中找到“社交链接”选项。点击“添加链接”按钮，输入社交平台名称和链接地址，即可在博客中添加社交链接图标。\n六、使用 Next 主题 写作文章 在 Gridea 中，点击“新建文章”按钮开始写作。可以使用 Markdown 语法进行写作，Next 主题会对 Markdown 格式的文章进行良好的渲染。\n发布文章 写作完成后，点击“保存并同步”按钮，将文章发布到你的博客中。Next 主题会根据你的配置对文章进行展示，包括文章标题、日期、标签等信息。\n浏览博客 发布文章后，可以在浏览器中打开你的博客地址，浏览使用 Next 主题的博客效果。可以查看文章列表、点击文章阅读详细内容，还可以通过导航栏和社交链接与你进行互动。\n七、总结 Next 使用时遇到的一些问题\n主要是针对自己使用时遇见的一些问题做出一些赘述\n用的时候没有保存配置，然后要先按一下保存，因为作者那边更新了之后，用户对应的配置文件没有更新，所以要手动保存一下最新的配置，按完保存之后再同步就没有什么问题了。 会有一些图片因为各种原因不符合格式，当点击保存却没有反应的时候，有可能就是哪个图片出了问题，点击左上角编辑，找到开发者工具，点开，如果运行没有什么问题，那就自己联系作者。如果真的有问题，那就找一找是哪个图片出了问题，源文件下删除图片，再重进 Gridea，若显示没问题了，就可以保存了。 就是 Next 主题的菜单图标第 1 个首页的图标识别不了 还有就是一开始那主题菜单图标整个不见了重新加了就 4 个可以显现还有一个就是显现不出来 目前解决方案就是不用 GitHub 直接拉取整个仓库的源码，而使用作者发布页下载的压缩包。但这里有个问题就是里面没有搜索小组件和一些别的功能，但由于我懒所以联系了作者，作者他说有空帮我看一下毕竟他很久没维护那个主题了，然后他没回 我也懒得解决了，最后感觉这个主题不是很完善也不是很好看，可能因人而异吧， 就转 Hugo 去了。 暂时就更新到这里吧。\n通过以上步骤，你可以成功安装、配置和使用 Gridea 中的 Next 主题。Next 主题为你的博客带来了更加美观和丰富的功能，让你的博客更加个性化。在使用过程中，你可以根据自己的需求不断调整主题的配置，打造一个属于自己的完美博客。希望这篇指南对你有所帮助！\n","date":"2024-10-01T00:00:00Z","permalink":"http://localhost:1313/p/gridea%E4%B8%BB%E9%A2%98next%E7%9A%84%E9%85%8D%E7%BD%AE/","title":"Gridea主题Next的配置"}]